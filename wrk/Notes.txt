

Loaded Source: Test                   Type: Indexed    *       1000 rows
Loaded Source: Globals                Type: Hashed     *          2 rows
Loaded Source: Serial                 Type: Sequence   *  Starting value 3
Loaded Source: Sequence               Type: Sequence   *  Starting value 1006
Loaded Source: Names_10K              Type: CSV        *       2502 rows
Loaded Source: Addresses_10K          Type: CSV        *       9342 rows
Loaded Source: Customers              Type: CSV        *       6682 rows
Loaded Source: CustomerSearch         Type: CSV        *      14134 rows
Loaded Source: 2Postcodes             Type: Keyed      *          4 groups
Loaded Source: Bookings               Type: CSV        *        242 rows
Loaded Source: Wildcards              Type: CSV        *       6275 rows
Loaded Source: Bkg_Conf               Type: CSV        *          3 rows
Loaded Source: Bkg_Doc_CA             Type: CSV        *          3 rows
Loaded Source: Bkg_Doc_LB             Type: CSV        *          3 rows

Data Loaded...

Unloaded Sources:

   Source: Test                   Type: Indexed    *       1000 rows
   Source: Globals                Type: Hashed     *          2 rows
   Source: Serial                 Type: Sequence   *  Starting value 3
   Source: Sequence               Type: Sequence   *  Starting value 1006
   Source: Names_10K              Type: CSV        *       2502 rows
   Source: Addresses_10K          Type: CSV        *       9342 rows
   Source: Customers              Type: CSV        *       6682 rows
   Source: CustomerSearch         Type: CSV        *      14134 rows
   Source: 2Postcodes             Type: Keyed      *          4 groups
   Source: Bookings               Type: CSV        *       1590 rows
   Source: Wildcards              Type: CSV        *       6275 rows
   Source: Bkg_Conf               Type: CSV        *       1351 rows
   Source: Bkg_Doc_CA             Type: CSV        *       1351 rows
   Source: Bkg_Doc_LB             Type: CSV        *       1351 rows

@ Tue Dec  7 08:50:35 AUSEDT 2010

So created 1351 bookings -> 

------------------------------------------------------
This is intended as a drop-in replacement for the ThreadingMixIn class in module SocketServer of the standard lib. Instead of spawning a new thread for each request, requests are processed by of pool of reusable threads.

from SocketServer import ThreadingMixIn
from Queue import Queue
import threading, socket


class ThreadPoolMixIn(ThreadingMixIn):
    '''
    use a thread pool instead of a new thread on every request
    '''
    numThreads = 10
    allow_reuse_address = True  # seems to fix socket.error on server restart

    def serve_forever(self):
        '''
        Handle one request at a time until doomsday.
        '''
        # set up the threadpool
        self.requests = Queue(self.numThreads)

        for x in range(self.numThreads):
            t = threading.Thread(target = self.process_request_thread)
            t.setDaemon(1)
            t.start()

        # server main loop
        while True:
            self.handle_request()
            
        self.server_close()

    
    def process_request_thread(self):
        '''
        obtain request from queue instead of directly from server socket
        '''
        while True:
            ThreadingMixIn.process_request_thread(self, *self.requests.get())

    
    def handle_request(self):
        '''
        simply collect requests and put them on the queue for the workers.
        '''
        try:
            request, client_address = self.get_request()
        except socket.error:
            return
        if self.verify_request(request, client_address):
            self.requests.put((request, client_address))



if __name__ == '__main__':
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from SocketServer import TCPServer
    
    class ThreadedServer(ThreadPoolMixIn, TCPServer):
        pass

    def test(HandlerClass = SimpleHTTPRequestHandler,
            ServerClass = ThreadedServer, 
            protocol="HTTP/1.0"):
        '''
        Test: Run an HTTP server on port 8002
        '''

        port = 8002
        server_address = ('', port)

        HandlerClass.protocol_version = protocol
        httpd = ServerClass(server_address, HandlerClass)

        sa = httpd.socket.getsockname()
        print "Serving HTTP on", sa[0], "port", sa[1], "..."
        httpd.serve_forever()

    test()


---------------------------------------------------------------------

class _ThreadPoolMixIn(SocketServer.ThreadingMixIn): ''' Uses a thread from a thread pool instead of instantiate a new one on every request. '''
   numThreads = None

   def __init__(self, numThreads): ''' Sets up the threadPool and "fills" it with the threads. '''
      self.numThreads = numThreads

      self.requests = Queue.Queue(self.numThreads)

      for n in range(self.numThreads):
         t = threading.Thread(target = self.process_request_thread)
         t.setDaemon(1)
         t.start()

      def process_request(self, request, client_address): ''' Simply collect requests and put them on the queue for the workers. '''
         self.requests.put((request, client_address))

      def process_request_thread(self): ''' Obtains request and client_address from the queue instead of directly from a call '''

         # The thread starts and stays on this loop.
         # The method call hangs waiting until something is inserted into self.requests
         #  and .get() unblocks
         while True:
            SocketServer.ThreadingMixIn.process_request_thread(self, *self.requests.get())
         # http://docs.python.org/tut/node6.html#SECTION006740000000000000000

class ThreadingPoolTCPServer(_ThreadPoolMixIn, SocketServer.TCPServer): """Calls the __init__ from both super."""
   def __init__(self, server_address, RequestHandlerClass, numThreads,\ bind_and_activate=True): _ThreadPoolMixIn.__init__(self, numThreads)
      SocketServer.TCPServer.__init__(self, server_address, RequestHandlerClass)

class ThreadingPoolUDPServer(_ThreadPoolMixIn, SocketServer.UDPServer): """Calls the __init__ from both super."""
   def __init__(self, server_address, RequestHandlerClass, numThreads,\ bind_and_activate=True): _ThreadPoolMixIn.__init__(self, numThreads)
      SocketServer.UDPServer.__init__(self, server_address, RequestHandlerClass)

